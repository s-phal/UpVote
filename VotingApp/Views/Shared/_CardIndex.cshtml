@using Humanizer;
@using Microsoft.AspNetCore.Identity;
@using VotingApp.Data;
@using VotingApp.Helpers;
@using X.PagedList.Mvc.Core;
@model X.PagedList.IPagedList<VotingApp.Models.Idea>
@inject UserManager<Member> _userManager;
@inject SignInManager<Member> _signInManager;
@inject ApplicationDbContext _context;


@{
    // text colors for moderated Ideas
    string textModerated = "text-danger opacity-50";
    string textBlack = "text-black";
    
    // get list of categories from database
    var category = _context.Category.ToList();

    // get user properties
    var getUserRole = await _userManager.GetUserAsync(User);

}

<!-- Filters START -->
<partial name="_Filters" />
<!-- Filters END -->

<!-- Display Message START-->
<partial name="_DisplayMessage" />
<!-- Display Message END-->

@{
    foreach (var idea in Model)
    {
        var disableButton = "disabled";

        // get vote count
        var voteCount = idea.Votes.Where(vote => vote.IdeaId == idea.Id).Count();

        // get comment count
        var commentCount = idea.Comments.Where(c => c.IdeaId == idea.Id).Count();

        // get spam count on comments
        var spamCommentCount = idea.Comments.Where(c => c.SpamReports != 0).Count();

        // get combined total spam count of both ideas and comments
        var totalSpam = idea.SpamReports + spamCommentCount;

        // get user property of idea owner
        var ideaOwner = await _userManager.FindByIdAsync(idea.MemberId);

        // convert timespan to human readable
        var timeSpan = new HelperMethods(_context).ConvertTimeSpan(idea);

        // get the vote count of the specified Idea voted by the user
        var getMemberVote = _context.Vote
        .Where(v => v.IdeaId == idea.Id && v.MemberId == _userManager.GetUserId(User))
        .ToList();
        

        <!--Index Card START -->
        <div class="card mb-3 border-0 rounded-5 shadow" >
            <div class="row g-0">
                <div class="d-none d-md-none d-xl-block col-md-2 border-end">
                    <div class="card-body text-center">
                        @if (getMemberVote.Count() == 0)
                        {
                            // leave text class on default if user has not voted
                            <h5 class="card-title">@voteCount</h5>                            
                        }
                        @if (getMemberVote.Count() != 0)
                        {
                            // change text class if user already voted
                            <h5 class="card-title text-voted fw-bold">@voteCount</h5>
                        }
                        <p class="card-text">Votes</p>
                        @{
                            // add to vote count if the user has not voted yet
                            if (getMemberVote.Count == 0)
                            {
                                <form asp-action="AddVoteIndex" asp-controller="Votes">
                                    <input type="hidden" name="Id" value="@idea.Id" />
                                    <input type="hidden" name="Title" value="@idea.Title" />
                                    <input type="hidden" name="CategoryId" value="@idea.Category.Id" />
                                    <input type="hidden" name="Description" value="@idea.Description" />
                                    <input type="hidden" name="MemberId" value="@_userManager.GetUserId(User)" />
                                    <button type="submit" class="vote border-0 rounded-5 text-uppercase" 
                                    @if(idea.CurrentStatus == "closed") 
                                    {
                                        // disable the button if post status is closed
                                        @disableButton 
                                    }
                                    >Vote</button>
                                </form>
                            }
                            // remove the vote count if user already voted
                            if (getMemberVote.Count != 0)
                            {
                                <form asp-action="RemoveVoteIndex" asp-controller="Votes">
                                    <input type="hidden" name="Id" value="@idea.Id" />
                                    <input type="hidden" name="Title" value="@idea.Title" />
                                    <input type="hidden" name="CategoryId" value="@idea.Category.Id" />
                                    <input type="hidden" name="Description" value="@idea.Description" />

                                    <input type="hidden" name="MemberId" value="@_userManager.GetUserId(User)" />
                                    <button type="submit" class="voted border-0 rounded-5 text-white text-uppercase" 
                                    @if(idea.CurrentStatus == "closed") 
                                    {
                                        // disable the button if post status is closed
                                        @disableButton 
                                    }
                                        >Voted</button>
                                </form>
                            }
                        }

                    </div>
                </div>
                <div class="col-1 p-3">
                    <img src="~/uploads/avatars/@ideaOwner.AvatarFileName" alt="avatar" class="avatar rounded-3" />
                </div>
                <div class="col-md-9">
                    <div class="card-body mb-3">
                        @if(_signInManager.IsSignedIn(User) && getUserRole.UserRole == "admin")
                        {
                            // display spam count if more than 0. User must be in the admin role to see.
                            if(idea.SpamReports != 0 || spamCommentCount != 0) 
                            {
                                <div class="text-danger mb-1 text-uppercase">spam reports: @totalSpam</div> 
                            }
                     
                        }
                        <h5 class="card-title"><a href="/ideas/details/@idea.Slug" class="text-decoration-none text-black">@idea.Title</a></h5>
                        @{
                            if (idea.Description.Length >= 261)
                            {
                                // truncate the description if the length exceed the character limit
                                <p class="card-text">
                                    <a href="/ideas/details/@idea.Slug" class="text-decoration-none @if(idea.IsModerated) { @textModerated } else { @textBlack }">@idea.Description.Substring(0,260)...
                                    </a>
                                </p>
                            }
                            else
                            {
                                <p class="card-text">
                                    <a href="/ideas/details/@idea.Slug" class="text-decoration-none @if(idea.IsModerated) { @textModerated } else { @textBlack }">@idea.Description</a>
                                </p>
                            }
                        }
                    </div>
                    <div class="d-flex bd-highlight mb-3">
                        <div class="px-3 bd-highlight text-secondary opacity-50">@timeSpan</div>
                        <div class="px-3 bd-highlight opacity-75"><a class="text-decoration-none text-secondary" href="~/categories/@idea.Category.Name">@idea.Category.Name</a></div>
                        <div class="bd-highlight"><a href="/ideas/details/@idea.Slug" class="text-secondary text-decoration-none opacity-75">@commentCount Comments</a></div>
                        @{
                            // checks status of the post and displays the button colors accordingly
                            if (idea.CurrentStatus == "open")
                            {
                                <div class="ms-auto bd-highlight pe-3"><button class="status-open border-0 rounded-5">Open</button></div>
                            }
                            if (idea.CurrentStatus == "considering")
                            {
                                <div class="ms-auto bd-highlight pe-3"><button class="status-considering border-0 rounded-5">Considering</button></div>
                            }
                            if (idea.CurrentStatus == "in-progress")
                            {
                                <div class="ms-auto bd-highlight pe-3"><button class="status-in-progress border-0 rounded-5 text-white">In Progress</button></div>
                            }
                            if (idea.CurrentStatus == "implemented")
                            {
                                <div class="ms-auto bd-highlight pe-3"><button class="status-implemented border-0 rounded-5 text-white">Implemented</button></div>
                            }
                            if (idea.CurrentStatus == "closed")
                            {
                                <div class="ms-auto bd-highlight pe-3"><button class="status-closed border-0 rounded-5 text-white">Closed</button></div>
                            }
                        }
                        @if (_signInManager.IsSignedIn(User))
                        {
                            <div class="bd-highlight pe-3 dropdown">
                                <button class="three-dots border-0 rounded-5" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots" viewBox="0 0 16 16">
                                        <path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z" />
                                    </svg>
                                </button>
                                <ul class="dropdown-menu border-0 shadow" aria-labelledby="dropdownMenuButton1">
                                    <li><button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#spamModal-@idea.Id">Mark as Spam</button></li>

                                    @{
                                        if (getUserRole.UserRole == "admin")
                                        {
                                            // display admin dropdown-items if user is an admin
                                            <li><button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#moderateModal-@idea.Id">Moderate Post</button></li>
                                            <li><button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deleteModal-@idea.Id">Delete Post</button></li>

                                        }
                                        if (idea.MemberId == _userManager.GetUserId(User) && getUserRole.UserRole != "admin")
                                        {
                                            // allow user to delete their own post.
                                            // the != admin condition is to prevent double "delete post" items 
                                            // from showing up on on admins list
                                            <li><button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deleteModal-@idea.Id">Delete Post</button></li>
                                        }
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Index Card END -->

        <!-- Spam Modal START -->
        <div class="modal" id="spamModal-@idea.Id" tabindex="-1" aria-labelledby="spamModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Report as Spam?</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Would you like to report this post as spam?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <form asp-action="ReportSpam" asp-controller="Spams">
                            <input type="hidden" name="Id" value="@idea.Id" />
                            <input type="hidden" name="SpamReports" value="@idea.SpamReports"/>
                            <button type="submit" class="btn btn-danger">Report spam</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- Spam Model END -->

        <!-- Delete Modal START -->
        <div class="modal" id="deleteModal-@idea.Id" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete post?</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete your post? You can't undo this.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <form asp-action="DeleteIdea" asp-controller="ideas">
                            <input type="hidden" name="Id" value="@idea.Id" />
                            <button type="submit" class="btn btn-danger">Delete post</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- Delete Model END -->

        <!-- Moderate Modal START -->
        <form asp-action="ModerateIdea" asp-controller="ideas">
            <input type="hidden" name="Id" value="@idea.Id" />
            <input type="hidden" name="MemberId" value="@idea.MemberId" />
            <input type="hidden" name="CategoryId" value="@idea.CategoryId" />
            <input type="hidden" name="Title" value="@idea.Title" />

            <div class="modal" id="moderateModal-@idea.Id" tabindex="-1" aria-labelledby="moderateModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5">Moderate post?</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <textarea class="form-control" name="Description">Content has been removed by an Admin.</textarea>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-warning">Update post</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
        <!-- Moderate Model END -->
    }
}





<nav>
    @{
        var ModelName = "";

        // keys are passed in from controllers
        // they are used to make pagination links functional   
        if (TempData.ContainsKey("ModelName"))
        {
            ModelName = TempData["ModelName"].ToString();
        }

        @Html.PagedListPager(Model, page => Url.Action(ModelName, new { page }), new X.PagedList.Web.Common.PagedListRenderOptions
            {
                PageClasses = new string[] { "page-link" },
                UlElementClasses = new string[] { "pagination pagination-sm justify-content-end" },
                LiElementClasses = new string[] { "page-item" },
                DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                MaximumPageNumbersToDisplay = 5
            });
    }
</nav>
